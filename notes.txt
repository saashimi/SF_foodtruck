# Socrata SF API endpoint:
https://data.sfgov.org/resource/6a9r-agq8.geojson
                                            ^-----outputs raw geojson
#Load up the database:
ogr2ogr -f "PostgreSQL" PG:"dbname=sf_foodtruck user=kevin" "output.geojson" 

#Ping the Socrata API
import requests
r = requests.get('https://data.sfgov.org/resource/6a9r-agq8.geojson')
with open('output.geojson', 'w') as data:
    data.write(json.dumps(r.json()))

#inject geojson into DB# NOTE: WE DIDN'T USE THIS:
ogr2ogr -f "PostgreSQL" PG:"dbname=sf_foodtruck user=kevin" "output.geojson"
ogr2ogr -f "PostgreSQL" PG:"dbname=my_database user=postgres" "source_data.json" -nln destination_table -append 
#                   ^-------if you want to append to existing table. Note that
#                           this didn't actually work for us.

# Load up postGIS 
CREATE EXTENSION postgis; 

# We learned:
SELECT applicant, address FROM foodtruck_master
WHERE ST_DWithin(wkb_geometry, ST_PointFromText('POINT(-122.418982 37.779312)',4326), 
.0044996640028797696);
# Units, in this case decimal degrees, need to be consistent if you make any 
boundary calculations.

#This was a PITA
GDAL_LIBRARY_PATH = '/home/kevin/miniconda3/envs/SF_foodtruck/lib/libgdal.so'

#In psql as superuser:
CREATE USER foodtruck_user WITH PASSWORD 'password';
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO foodtruck_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO foodtruck_user;
ALTER ROLE foodtruck_user SUPERUSER;

\c foodtruck_master;

$ psql foodtruck_user -h 127.0.0.1 -d sf_foodtruck

# To remedy django.db.utils.ProgrammingError: relation "django_content_type" already exists:
python manage.py migrate --fake-initial

# Start Cart data app
python manage.py startapp cart_data


# Architecture: After loading data to GeoDjango application now, it's time to present it to the user. You can use django template tag like {{object}} but I think it's better to provide api endpoints. I will be using GeoDjango builtin GeoJSON serializer. To do this declare new views in views.py


#### We had issues with calling data from db so tried to populate it using loadscripts.
#### The loadscript had an issue, so we had to use null=True, blank=True allowances.

#PostgreSQL + PostGIS backend for geometric calculations
#Leaflet for FrontEnd display?




#The "RAW" AJAX CALL ...

function getPointsFromClick(lat, lng) {
    $.ajax({
        type: 'get',
        url: "/cart_db_data/" + "?lat=" + lat + "&lng=" + lng,
        success: function (data) {
            var geojsonPointLayer = L.geoJson(data, {
                onEachFeature:function(feature, layer) {
                    layer.bindPopup(feature.properties.applicant.toString());
                }
            })
        }
    })
}

#VS A streamlined leaflet-ajax library call:

function getPointsFromClick(lat, lng) {
    var queryString = "?" + "lat=" + lat + "&lng=" + lng;
    var geojsonPointLayer = new L.GeoJSON.AJAX("cart_db_data" + queryString , {
    onEachFeature:function(feature, layer) {
        layer.bindPopup(feature.properties.applicant.toString());
    }
}); 